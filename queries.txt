This file is meant to store backups of tested queries for backup

mongoimport --db aaz7118_db --collection restaurants --file restaurants.json // import using cmd
mongoimport --db aaz7118_db --collection meteorites --file meteorites.json

1.

db.events.aggregate([
    // Check if the date is a full date or just a year
    {
      $addFields: {
        year: {
          $cond: [
            { $ne: [{ $indexOfBytes: ["$date", "/"] }, -1] },
            // If it's a full date, extract the year from the string
            { $toInt: { $substr: ["$date", 0, { $indexOfBytes: ["$date", "/"] }] } },
            // If it's just a year, convert the string to an integer
            { $toInt: "$date" }
          ]
        }
      }
    },
    // Group events by year and count them
    {
      $group: {
        _id: "$year",
        count: { $sum: 1 }
      }
    },
    // Sort the result by year in ascending order
    { $sort: { _id: 1 } }
  ])

2.
  db.events.aggregate([
    // Check if the date is a full date or just a year
    {
        $addFields: {
            year: {
                $cond: [
                { $eq: [{ $size: { $split: ["$date", "/"] } }, 3] },
                // If it's a full date, extract the year from the array
                { $toInt: { $arrayElemAt: [{ $split: ["$date", "/"] }, 0] } },
                // If it's just a year, convert the string to an integer
                { $toInt: "$date" }
                ]
            }
            }
    },
    // Group events by year and count them
    {
      $group: {
        _id: "$year",
        count: { $sum: 1 }
      }
    },
    // Sort the result by year in ascending order
    { $sort: { _id: 1 } }
  ])

  3.

  db.events.aggregate([
    // Check if the date is a full date or just a year
    {
        $addFields: {
            year: {
              $cond: [
                { $gt: [{ $strLenBytes: "$date" }, 4] },
                // If it's a full date, extract the year from the string
                { $toInt: { $substr: ["$date", 0, { $indexOfBytes: ["$date", "/"] }] } },
                // If it's just a year, convert the string to an integer
                { $toInt: "$date" }
              ]
            }
          }
          
          
    },
    // Group events by year and count them
    {
      $group: {
        _id: "$year",
        count: { $sum: 1 }
      }
    },
    // Sort the result by year in ascending order
    { $sort: { _id: 1 } }
  ])

  5. db.events.aggregate([
    // Check if the date is a full date or just a year
    {
        $addFields: {
            year: {
                $cond: [
                { $gt: [{ $strLenBytes: "$date" }, 4] },
                // If it's a full date, extract the year from the array
                { $toInt: { $arrayElemAt: [{ $split: ["$date", "/"] }, 0] } },
                // If it's just a year, convert the string to an integer
                { $toInt: "$date" }
                ]
            }
            }
    },
    // Group events by year and count them
    {
      $group: {
        _id: "$year",
        count: { $sum: 1 }
      }
    },
    // Sort the result by year in ascending order
    { $sort: { _id: 1 } }
  ]) 
 From my data, write a query to find entries with "fell":"Found" and use the geospatial facilities to find the nearest city to each meteorite. Use the $near operator and select this closest entry per city. The collection name is meteorites. 

Here is my data:
{ _id: ObjectId("63945b08e5fdaab8b05e88bf"),
  fall: 'Fell',
  geolocation: { type: 'Point', coordinates: [ 111.53333, -7.08333 ] },
  id: '24011',
  mass: '20000',
  name: 'Tjabe',
  nametype: 'Valid',
  recclass: 'H6',
  reclat: '-7.083330',
  reclong: '111.533330',
  year: '1869-01-01T00:00:00.000' }
{ _id: ObjectId("63945b08e5fdaab8b05e88c0"),
  fall: 'Fell',
  geolocation: { type: 'Point', coordinates: [ 79.41667, 13.63333 ] },
  id: '24009',
  mass: '230',
  name: 'Tirupati',
  nametype: 'Valid',
  recclass: 'H6',
  reclat: '13.633330',
  reclong: '79.416670',
  year: '1934-01-01T00:00:00.000' }
{ _id: ObjectId("63945b08e5fdaab8b05e88c1"),
  fall: 'Fell',
  geolocation: { type: 'Point', coordinates: [ 34.76667, 47.85 ] },
  id: '24019',
  mass: '600',
  name: 'Tomakovka',
  nametype: 'Valid',
  recclass: 'LL6',
  reclat: '47.850000',
  reclong: '34.766670',
  year: '1905-01-01T00:00:00.000' }
{ _id: ObjectId("63945b08e5fdaab8b05e88c2"),
  fall: 'Fell',
  geolocation: { type: 'Point', coordinates: [ 142.95, -25.73333 ] },
  id: '23897',
  mass: '160000',
  name: 'Tenham',
  nametype: 'Valid',
  recclass: 'L6',
  reclat: '-25.733330',
  reclong: '142.950000',
  year: '1879-01-01T00:00:00.000' }
{ _id: ObjectId("63945b08e5fdaab8b05e88c3"),
  fall: 'Fell',
  geolocation: { type: 'Point', coordinates: [ 106.58333, -6.66667 ] },
  id: '24012',
  mass: '16500',
  name: 'Tjerebon',
  nametype: 'Valid',
  recclass: 'L5',
  reclat: '-6.666670',
  reclong: '106.583330',
  year: '1922-01-01T00:00:00.000' }
{ _id: ObjectId("6394734ae744b0cb1b05bc8d"),
  city: 'Malishevë',
  city_ascii: 'Malisheve',
  lat: 42.4822,
  lng: 20.7458,
  country: 'Kosovo',
  iso2: 'XK',
  iso3: 'XKS',
  admin_name: 'Malishevë',
  capital: 'admin',
  population: '',
  id: 1901597212 }
{ _id: ObjectId("6394734ae744b0cb1b05bc8e"),
  city: 'Prizren',
  city_ascii: 'Prizren',
  lat: 42.2139,
  lng: 20.7397,
  country: 'Kosovo',
  iso2: 'XK',
  iso3: 'XKS',
  admin_name: 'Prizren',
  capital: 'admin',
  population: '',
  id: 1901360309 }
{ _id: ObjectId("6394734ae744b0cb1b05bc8f"),
  city: 'Kamenicë',
  city_ascii: 'Kamenice',
  lat: 42.5781,
  lng: 21.5803,
  country: 'Kosovo',
  iso2: 'XK',
  iso3: 'XKS',
  admin_name: 'Kamenicë',
  capital: 'admin',
  population: '',
  id: 1901851592 }
{ _id: ObjectId("6394734ae744b0cb1b05bc90"),
  city: 'Viti',
  city_ascii: 'Viti',
  lat: 42.3214,
  lng: 21.3583,
  country: 'Kosovo',
  iso2: 'XK',
  iso3: 'XKS',
  admin_name: 'Viti',
  capital: 'admin',
  population: '',
  id: 1901328795 }
{ _id: ObjectId("6394734ae744b0cb1b05bc91"),
  city: 'Shtërpcë',
  city_ascii: 'Shterpce',
  lat: 42.2394,
  lng: 21.0272,
  country: 'Kosovo',
  iso2: 'XK',
  iso3: 'XKS',
  admin_name: 'Shtërpcë',
  capital: 'admin',
  population: '',
  id: 1901828239 }